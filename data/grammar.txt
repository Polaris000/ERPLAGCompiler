<program> -> <moduleDeclarations><otherModules><driverModule><otherModules> 
<moduleDeclarations> -> <moduleDeclaration><moduleDeclarations> | e
<moduleDeclaration> -> DECLARE MODULE ID SEMICOL
<otherModules> ->  <module><otherModules> | e
<driverModule> -> DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> ->  DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC    SEMICOL <ret> <moduleDef>
<ret> ->  RETURNS SQBO <output_plist> SQBC SEMICOL | e
<input_plist> -> ID COLON <dataType> <input_plist_dash>
<input_plist_dash> -> COMMA ID COLON <dataType><input_plist_dash> | e
<output_plist> -> ID COLON <type> <output_plist_dash>
<output_plist_dash> â†’ COMMA ID COLON <type><output_plist_dash> | e
<dataType> -> INTEGER | BOOLEAN | REAL | ARRAY SQBO <range_array> SQBC OF <type>
<range_array> -> <index> RANGEOP <index>
<type> ->  INTEGER | REAL | BOOLEAN
<moduleDef> ->  START <statements> END
<statements> -> <statement><statements> | e
<statement> -> <ioStmt> | <simpleStmt> | <declareStmt> | <conditionalStmt> | <iterativeStmt>
<ioStmt> -> GET_VALUE BO ID BC SEMICOL | PRINT BO <var> BC SEMICOL
<var> -> <var_id_num> | <boolConstt>
<var_id_num> ->  ID <whichId> | NUM | RNUM
<boolConstt> -> TRUE | FALSE 
<whichId> ->  SQBO <index> SQBC | e
<simpleStmt> -> <assignmentStmt> | <moduleReuseStmt>
<assignmentStmt> ->  ID <whichStmt>
<whichStmt> ->  <lvalueIDStmt> | <lvalueARRStmt>
<lvalueIDStmt> ->  ASSIGNOP <expression> SEMICOL
<lvalueARRStmt> ->   SQBO <index> SQBC ASSIGNOP <expression> SEMICOL
<index> ->  NUM | ID
<moduleReuseStmt> ->  <optional> USE MODULE ID WITH PARAMETERS <idList> SEMICOL
<optional> ->  SQBO <idList> SQBC ASSIGNOP | e
<idList> -> ID <idList_dash>
<idList_dash> -> COMMA ID <idList_dash> | e
<expression> -> <arithmeticOrBooleanExpr> | <op_plus_minus> <unaryOrExpr>
<unaryOrExpr> -> BO <arithmeticExpr> BC | <var_id_num> 
<arithmeticOrBooleanExpr> ->  <anyTerm> <bool>
<anyTerm> -> <arithmeticExpr> <arithmeticExpr_dash> | <boolConstt> <aruthmeticExpr_dash>
<arithmeticExpr_dash> -> <relationalOp> <arithmeticExpr>  <arithmeticExpr_dash> | e
<bool> -> <logicalOp> <anyTerm> <bool> | e
<arithmeticExpr> -> <term>  <arithmeticExpr_recur>
<arithmeticExpr_recur> -> <op_plus_minus> <term> <arithmeticExpr_recur> | e
<term> ->  <factor> <term_dash>
<term_dash> -> <op_mul_div> <factor> <term_dash> | e 
<factor> ->  BO <arithmeticExpr> BC | <var_id_num>
<op_plus_minus> ->  PLUS | MINUS
<op_mul_div> -> MUL | DIV
<logicalOp> ->  AND | OR
<relationalOp> ->  GT | LT | GE | LE | EQ | NE
<declareStmt> -> DECLARE <idList> COLON <dataType> SEMICOL
<conditionalStmt> ->  SWITCH BO ID BC START <caseStmts> <default> END 
<caseStmts> ->  CASE <value> COLON <statements> BREAK SEMICOL <caseStmt>
<caseStmt> ->  CASE <value> COLON <statements> BREAK SEMICOL <caseStmt> | e
<value> ->  NUM | TRUE | FALSE
<default> ->  DEFAULT COLON <statements> BREAK SEMICOL | e
<iterativeStmt> ->  FOR BO ID IN <range> BC START <statements> END | WHILE BO <arithmeticOrBooleanExpr> BC START <statements> END
<range> ->  NUM RANGEOP NUM
